package com.genpact.model.impl;

import com.genpact.model.QbProject;
import com.genpact.model.QbProjectModel;
import com.genpact.model.QbProjectSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the QbProject service. Represents a row in the &quot;t_qb_project&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.genpact.model.QbProjectModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QbProjectImpl}.
 * </p>
 *
 * @author 710008328
 * @see QbProjectImpl
 * @see com.genpact.model.QbProject
 * @see com.genpact.model.QbProjectModel
 * @generated
 */
@JSON(strict = true)
public class QbProjectModelImpl extends BaseModelImpl<QbProject>
    implements QbProjectModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a qb project model instance should use the {@link com.genpact.model.QbProject} interface instead.
     */
    public static final String TABLE_NAME = "t_qb_project";
    public static final Object[][] TABLE_COLUMNS = {
            { "project_id", Types.BIGINT },
            { "project_name", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table t_qb_project (project_id LONG not null primary key,project_name VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table t_qb_project";
    public static final String ORDER_BY_JPQL = " ORDER BY qbProject.project_id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY t_qb_project.project_id ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.genpact.model.QbProject"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.genpact.model.QbProject"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.genpact.model.QbProject"));
    private static ClassLoader _classLoader = QbProject.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            QbProject.class
        };
    private long _project_id;
    private String _project_name;
    private QbProject _escapedModel;

    public QbProjectModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static QbProject toModel(QbProjectSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        QbProject model = new QbProjectImpl();

        model.setProject_id(soapModel.getProject_id());
        model.setProject_name(soapModel.getProject_name());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<QbProject> toModels(QbProjectSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<QbProject> models = new ArrayList<QbProject>(soapModels.length);

        for (QbProjectSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _project_id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setProject_id(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _project_id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return QbProject.class;
    }

    @Override
    public String getModelClassName() {
        return QbProject.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("project_id", getProject_id());
        attributes.put("project_name", getProject_name());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long project_id = (Long) attributes.get("project_id");

        if (project_id != null) {
            setProject_id(project_id);
        }

        String project_name = (String) attributes.get("project_name");

        if (project_name != null) {
            setProject_name(project_name);
        }
    }

    @JSON
    @Override
    public long getProject_id() {
        return _project_id;
    }

    @Override
    public void setProject_id(long project_id) {
        _project_id = project_id;
    }

    @JSON
    @Override
    public String getProject_name() {
        if (_project_name == null) {
            return StringPool.BLANK;
        } else {
            return _project_name;
        }
    }

    @Override
    public void setProject_name(String project_name) {
        _project_name = project_name;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            QbProject.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public QbProject toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (QbProject) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        QbProjectImpl qbProjectImpl = new QbProjectImpl();

        qbProjectImpl.setProject_id(getProject_id());
        qbProjectImpl.setProject_name(getProject_name());

        qbProjectImpl.resetOriginalValues();

        return qbProjectImpl;
    }

    @Override
    public int compareTo(QbProject qbProject) {
        long primaryKey = qbProject.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof QbProject)) {
            return false;
        }

        QbProject qbProject = (QbProject) obj;

        long primaryKey = qbProject.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<QbProject> toCacheModel() {
        QbProjectCacheModel qbProjectCacheModel = new QbProjectCacheModel();

        qbProjectCacheModel.project_id = getProject_id();

        qbProjectCacheModel.project_name = getProject_name();

        String project_name = qbProjectCacheModel.project_name;

        if ((project_name != null) && (project_name.length() == 0)) {
            qbProjectCacheModel.project_name = null;
        }

        return qbProjectCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{project_id=");
        sb.append(getProject_id());
        sb.append(", project_name=");
        sb.append(getProject_name());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.genpact.model.QbProject");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>project_id</column-name><column-value><![CDATA[");
        sb.append(getProject_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>project_name</column-name><column-value><![CDATA[");
        sb.append(getProject_name());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
